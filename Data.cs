// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CovidInfo;
//
//    var covidData = CovidData.FromJson(jsonString);

namespace Covid_Info
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CovidData
    {
        [JsonProperty("Global", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Global Global { get; set; }
    }

    public partial class Global
    {
        [JsonProperty("NewConfirmed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? NewConfirmed { get; set; }

        [JsonProperty("TotalConfirmed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalConfirmed { get; set; }

        [JsonProperty("NewDeaths", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? NewDeaths { get; set; }

        [JsonProperty("TotalDeaths", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalDeaths { get; set; }

        [JsonProperty("NewRecovered", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? NewRecovered { get; set; }

        [JsonProperty("TotalRecovered", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalRecovered { get; set; }
    }

    public partial class CovidData
    {
        public static CovidData FromJson(string json) => JsonConvert.DeserializeObject<CovidData>(json, Covid_Info.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CovidData self) => JsonConvert.SerializeObject(self, Covid_Info.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
